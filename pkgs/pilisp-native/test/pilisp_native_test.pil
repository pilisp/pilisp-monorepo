(defn test-spit-and-slurp
  {.test true}
  []
  (let [now       (current-time-millis)
        file-name (str "/tmp/pilisp-native-" now)
        content   (str "Unique content written at " now)]
    (spit file-name content)
    (test/is= content (slurp file-name))))

(def native-pilisp-tests
  (reduce
   (fn [acc binding]
     (let [{:keys [value meta]} binding]
       (if (:test meta)
         (conj acc value)
         acc)))
   []
   (vals (bindings))))

(defn run-native-pilisp-tests []
  (map (fn tester [f] (f)) native-pilisp-tests))

(run-native-pilisp-tests)
(println (test/suite-report))
(let [report (deref test/suite)
      {:keys [fail error]} report
      exit-fail? (or (> (count fail) 0)
                     (> (count error) 0))]
  (test/suite-reset)
  (if exit-fail?
    (throw (ex-info "Tests failed. See report above."))
    :all-tests-pass))
